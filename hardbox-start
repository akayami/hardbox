#!/usr/bin/env node

const program = require('commander');

//let init = ['/etc/hardbox/config.js', 'conf/config.js', 'conf/config-local.js'];
let init = ['conf/config.js', 'conf/config-local.js'];

program
	.version('0.1.0')
	.arguments('<configFile...>')
	.action(function(c) {
		init = c;
	});
program.parse(process.argv);


//console.info(init);

const config = Object.freeze(require('plain-config')(init, {
	strict: false,
	debug: false
}));


const pino = require('pino');
const logger = pino();
//logger.child({test: 'a'}).log('test');

//logger.log = logger.info;
//console = logger;

//logger.child().log('hello');

// const { Console } = require('console');
// console = new Console({ stdout: process.stdout, stderr: process.stderr });
global.logger = logger;

//console.info('Test', {id: 10});

// const bunyan = require('bunyan');
//
// global.logger = bunyan.createLogger(config.bunyan);
// require('console2log/bunyan').attach(global.logger).disableConsole(true);

const cluster = require('cluster');
//const numCPUs = require('os').cpus().length;

const workers = config.workers || require('os').cpus().length;


const Propagator = require('./lib/propagator');

const stack = [];
const propagator = new Propagator(stack);

// console.info(config);
// console.info(cluster.isMaster, workers);

if (cluster.isMaster) {

	require('./lib/controller')(propagator, config.controller, function(err, res) {

		if(err) {
			console.error(err);
		}

		function newWorker() {
			var worker = cluster.fork();
			worker.on('exit', function(code, signal) {
				if (signal) {
					console.info(`Worker killed by signal: ${signal}`);
				} else if (code !== 0) {
					console.info(`worker exited with error code: ${code}`);
				} else {
					console.info('worker success!');
				}
			});
			return worker;
		}

		// Fork workers.
		for (var i = 0; i < workers; i++) {
			var worker = newWorker();
			stack.push(worker);
		}

		var event = cluster.on('exit', function(deadWorker, code, signal) {
			var worker = newWorker();
			stack.push(worker);

			// Note the process IDs
			var newPID = worker.process.pid;
			var oldPID = deadWorker.process.pid;

			// Log the event
			console.info('worker ' + oldPID + ' died.');
			console.info('worker ' + newPID + ' born.');

		});
	});
} else {
	require('./index.js')(config);
}
